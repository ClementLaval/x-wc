function d(t,e){let o=Object.values(e.metadata).reduce((n,a)=>(a.kind==="property"&&n.push(a),n),[]),r=t.prototype.constructor.observedAttributes??[],s=o.filter(n=>!r.includes(n)&&!n.private);for(let n of s)r.push(n.name);Object.defineProperty(t,"observedAttributes",{get(){return r},configurable:!0})}function f(t){return t.toString()}function y(t){let e=Number(t);return Number.isNaN(e)?0:e}function C(t){let e="true",o="false";return t.toLowerCase()===e?!0:t.toLowerCase()===o?!1:t==="1"?!0:t==="0"?!1:!!t}function b(t){return JSON.parse(t)}function l(t,e){if(e==null)return null;switch(typeof t){case"string":return f(e);case"number":return y(e);case"boolean":return C(e);case"object":return b(e);default:throw new Error("Can not detect property type")}}var u=class{constructor(e){if(typeof e=="symbol")this._name=e.description??"";else if(typeof e=="string")this._name=e;else throw new Error("Attribute name must be a string or a symbol.");if(!this._name)throw new Error("Attribute name is empty.")}_name;get name(){return this._name.replace("#","")}set name(e){this._name=e}isPrivate(){return this._name.startsWith("#")}xName(){return`x-${this.name}`}};function p(t,e){Object.values(e.metadata).filter(r=>r.kind==="element").map(r=>r.name).forEach(r=>{let s=new u(r),n=t.querySelectorAll(`[${s.xName()}]`),a=Object.getOwnPropertyDescriptor(t.constructor.prototype,r);n.forEach((c,i)=>{a?.value.call(t,c,i)})})}function h(t,e,o){let s=Object.values(e.metadata).reduce((i,m)=>(m.kind==="property"&&i.push(m),i),[]).find(i=>i.name===o);if(!s)return;let n=`${s.private?"#":""}${s.name}`,a=t.getAttribute(o),c=t?.[n];a!=c&&t.setAttribute(o,c)}function g(t,e){let o=Object.values(e.metadata).reduce((s,n)=>(n.kind==="property"&&s.push(n),s),[]),r=t.prototype.attributeChangedCallback??function(s,n,a){return!0};t.prototype.attributeChangedCallback=function(s,n,a){let c=r.call(this,s,n,a);if(c===!1||c===null){h(this,e,s);return}if(n===a)return;let i=o.find(w=>w.name===s);if(!i)return;let m=`${i.private?"#":""}${i.name}`;if(i.private)return;let A=l(this[m],a);Reflect.set(this,m,A),p(this,e)}}function D(t,e){Object.values(e.metadata).filter(r=>r.kind==="event").forEach(r=>{let s=new u(r.name),n=t.querySelectorAll(`[${s.xName()}]`),a=Object.getOwnPropertyDescriptor(t.constructor.prototype,r.name);a&&n.forEach((c,i)=>{c.addEventListener(r.type,m=>{a.value.call(t,m)})})})}function E(t,e){let o=t.prototype.connectedCallback??function(){};t.prototype.connectedCallback=function(){p(this,e),D(this,e),o.call(this)}}function v(t,e){Object.values(e.metadata).filter(r=>r.kind==="event").forEach(r=>{let s=new u(r.name),n=t.querySelectorAll(`[${s.xName()}]`),a=Object.getOwnPropertyDescriptor(t.constructor.prototype,r.name);a&&n.forEach((c,i)=>{c.removeEventListener(r.type,m=>{a.value.call(t,m)})})})}function M(t,e){let o=t.prototype.disconnectedCallback??function(){};t.prototype.disconnectedCallback=function(){v(this,e),o.call(this)}}function T(t,e){d(t,e),g(t,e),E(t,e),M(t,e)}var O=(t,e)=>(o,r)=>{if(!(o.prototype instanceof HTMLElement))throw new Error("customElement decorator can only be used on classes extending HTMLElement.");if(!r.name)throw new Error("Class must have a name. Anonymous classes are not allowed.");Object.assign(r.metadata,{[r.name]:{name:r.name,kind:"class"}}),T(o,r),customElements.get(t)||r.addInitializer(()=>{customElements.define(t,o,e)})};var k={},x=(t=k)=>(e,o)=>{if(!["accessor"].includes(o.kind))throw new Error("property decorator must be used on auto-accessors only.");let r=new u(o.name);return Object.assign(o.metadata,{[r.name]:{name:r.name,kind:"property",private:r.isPrivate()}}),{init(s){let n=s,a=this;if(o.private)return a.setAttribute(r.name,String(n)),n;let c=a.getAttribute(r.name),i=l(n,c);return i||(a.setAttribute(r.name,String(n)),n)},get:function(){return e.get.call(this)},set:function(s){e.set.call(this,s),this.setAttribute(r.name,String(s))}}};var L={},H=(t=L)=>(e,o)=>{if(!["method"].includes(o.kind))throw new Error("element decorator must be used on method only.");if(!o.name)throw new Error("Function must have a name. Anonymous functions are not allowed.");let r=new u(o.name),s=e;e=function(n,a,...c){return s.call(e,n,a,...c)},Object.assign(o.metadata,{[o.name]:{name:r.name,kind:"element"}})};var V=(t,e={})=>(o,r)=>{if(!["method"].includes(r.kind))throw new Error("event decorator must be used on method only.");if(!r.name)throw new Error("Function must have a name. Anonymous functions are not allowed.");let s=new u(r.name);r.name&&(r.metadata[r.name]={name:s.name,kind:"event",type:t})};export{O as customElement,H as element,V as event,x as property};
